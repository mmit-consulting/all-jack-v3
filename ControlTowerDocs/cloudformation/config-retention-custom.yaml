AWSTemplateFormatVersion: '2010-09-09'
Description: Set AWS Config service retention (days)

Parameters:
  RetentionInDays: { Type: Number, Default: 1095 }

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ConfigRetention
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:PutRetentionConfiguration
                  - config:DescribeRetentionConfigurations
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  Fn:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt Role.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3, cfnresponse
          cfg = boto3.client('config')
          def handler(event, context):
              try:
                  if event.get('RequestType') == 'Delete':
                      # Safe: do not revert retention on delete
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  days = int(event['ResourceProperties']['RetentionInDays'])
                  cfg.put_retention_configuration(RetentionPeriodInDays=days)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'retention': days})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})

  ApplyRetention:
    Type: Custom::ConfigRetention
    Properties:
      ServiceToken: !GetAtt Fn.Arn
      RetentionInDays: !Ref RetentionInDays
